import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { supabase, testEventCreation, testRLSPolicies, verifyEventsTable } from '../lib/supabase';
import EventForm from '../components/EventForm';
import DashboardLayout from '../components/layout/DashboardLayout';
import { toast } from 'react-hot-toast';

interface EventSubmitData {
  id?: string;           // uuid, generated by database
  title: string;         // text
  description: string;   // text
  date: string;         // date
  time: string;         // time
  venue: string;        // text
  category: string;     // text
  organizer_id: string; // uuid
  ticket_price: number; // numeric
  capacity: number;     // int4
  status: string;       // text
  created_at: string;   // timestamptz
  updated_at: string;   // timestamptz
  image_url?: string;   // text, optional
}

const CreateEvent = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isVerified, setIsVerified] = useState(false);

  // Check authentication and role on mount
  useEffect(() => {
    const checkAccess = async () => {
      if (!user) {
        console.log('No user found, redirecting to login');
        toast.error('Please log in to create events');
        navigate('/login');
        return;
      }

      try {
        // First verify table structure
        console.log('Verifying events table structure...');
        const { success: tableSuccess, error: tableError } = await verifyEventsTable();
        
        if (!tableSuccess) {
          console.error('Events table verification failed:', tableError);
          toast.error('System configuration error');
          navigate('/events');
          return;
        }

        console.log('‚úÖ Events table structure verified');

        // Then test RLS policies
        console.log('Testing RLS policies...');
        const { success: rlsSuccess, error: rlsError, stage } = await testRLSPolicies(user.id);
        
        if (!rlsSuccess) {
          console.error('RLS policy test failed at stage:', stage, rlsError);
          toast.error('You do not have permission to create events');
          navigate('/events');
          return;
        }

        console.log('‚úÖ RLS policies verified');

        // Finally test event creation capability
        const { success, error } = await testEventCreation(user.id);
        
        if (!success) {
          console.error('Failed to verify event creation capability:', error);
          toast.error('You do not have permission to create events');
          navigate('/events');
          return;
        }

        console.log('‚úÖ Event creation capability verified');
        setIsVerified(true);
      } catch (error) {
        console.error('Error verifying system:', error);
        toast.error('System verification failed');
        navigate('/events');
      }
    };

    checkAccess();
  }, [user, navigate]);

  const handleSubmit = async (formData: EventSubmitData): Promise<void> => {
    console.log('üöÄ Starting event creation process...');
    console.log('1. Form data received:', formData);
    console.log('2. Current user:', user);

    const toastId = toast.loading('Creating event...');
    setIsSubmitting(true);
    setError(null);

    try {
      if (!user) {
        throw new Error('Please log in to create events');
      }

      if (!isVerified) {
        throw new Error('Event creation capability not verified');
      }

      // First verify the user's profile exists
      console.log('3. Verifying user profile...');
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (profileError || !profile) {
        console.error('Profile error:', profileError);
        throw new Error('Could not verify user profile');
      }

      if (profile.role !== 'organizer') {
        throw new Error('Only organizers can create events');
      }

      console.log('4. Profile verified:', profile);

      // Prepare event data with explicit typing
      const eventData: EventSubmitData = {
        title: formData.title.trim(),
        description: formData.description.trim(),
        date: formData.date,
        time: formData.time,
        venue: formData.venue.trim(),
        category: formData.category,
        ticket_price: formData.ticket_price,
        capacity: formData.capacity,
        image_url: formData.image_url || undefined,
        status: 'Published',
        organizer_id: user.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      console.log('5. Prepared event data:', eventData);

      // Insert the event with detailed error logging
      console.log('6. Attempting to insert event into database...');
      const { data: newEvent, error: insertError } = await supabase
        .from('events')
        .insert([eventData])
        .select('*')  // Get all fields
        .single();

      if (insertError) {
        console.error('Database error details:', {
          code: insertError.code,
          message: insertError.message,
          details: insertError.details,
          hint: insertError.hint
        });
        throw new Error(`Failed to create event: ${insertError.message}`);
      }

      if (!newEvent) {
        throw new Error('No event data returned after insertion');
      }

      console.log('7. Event created successfully:', newEvent);

      // Double check the event exists
      const { data: verifyEvent, error: verifyError } = await supabase
        .from('events')
        .select(`
          *,
          profiles:organizer_id (
            email,
            full_name
          )
        `)
        .eq('id', newEvent.id)
        .single();

      if (verifyError || !verifyEvent) {
        console.error('8. Verification failed:', { verifyError, verifyEvent });
        throw new Error('Event creation could not be verified');
      }

      console.log('9. Event verified in database:', verifyEvent);
      toast.success('Event created successfully!', { id: toastId });
      
      // Navigate to event management page
      navigate('/events/manage', { 
        state: { message: 'Event created successfully!' }
      });

    } catch (err) {
      console.error('‚ùå Event creation failed:', err);
      const message = err instanceof Error ? err.message : 'Failed to create event';
      setError(message);
      toast.error(message, { id: toastId });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Don't render the form if user is not authenticated or verified
  if (!user || !isVerified) {
    return null;
  }

  return (
    <DashboardLayout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-2xl font-bold text-gray-900">Create New Event</h1>
          <p className="mt-2 text-sm text-gray-600">
            Fill in the details below to create a new event.
          </p>
        </div>

        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded">
            {error}
          </div>
        )}

        <EventForm
          onSubmit={handleSubmit}
          onCancel={() => navigate('/events/manage')}
          isSubmitting={isSubmitting}
        />
      </div>
    </DashboardLayout>
  );
};

export default CreateEvent; 