import React, { useState, useRef } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { toast } from 'react-hot-toast';
import { supabase } from '../lib/supabase';

// This interface should exactly match the database schema
interface EventFormData {
  title: string;
  description: string;
  date: string;
  time: string;
  venue: string;
  category: 'concert' | 'conference' | 'art' | 'sports' | 'workshop' | 'webinar' | 'other';
  ticket_price: string;  // string for form input, will be converted to numeric
  capacity: string;      // string for form input, will be converted to int4
  image_url?: string;    // optional
}

interface EventSubmitData {
  id?: string;           // uuid, generated by database
  title: string;         // text
  description: string;   // text
  date: string;         // date
  time: string;         // time
  venue: string;        // text
  category: string;     // text
  organizer_id: string; // uuid
  ticket_price: number; // numeric
  capacity: number;     // int4
  status: string;       // text
  created_at: string;   // timestamptz
  updated_at: string;   // timestamptz
  image_url?: string;   // text, optional
}

interface EventFormProps {
  onSubmit: (data: EventSubmitData) => Promise<void>;
  onCancel: () => void;
  isSubmitting?: boolean;
}

const EventForm: React.FC<EventFormProps> = ({
  onSubmit,
  onCancel,
  isSubmitting = false
}) => {
  const { user } = useAuth();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [formData, setFormData] = useState<EventFormData>({
    title: '',
    description: '',
    date: '',
    time: '',
    venue: '',
    category: 'concert',
    ticket_price: '',
    capacity: '',
    image_url: ''
  });
  const [error, setError] = useState<string | null>(null);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    setError(null);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        toast.error('Please select an image file');
        return;
      }

      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        toast.error('Image size should be less than 5MB');
        return;
      }

      setSelectedFile(file);
      const objectUrl = URL.createObjectURL(file);
      setPreviewUrl(objectUrl);

      // Clean up the old preview URL
      return () => URL.revokeObjectURL(objectUrl);
    }
  };

  const testStorageAccess = async () => {
    try {
      console.log('Testing storage access...');
      
      // First verify authentication
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      
      if (authError) {
        console.error('Authentication error:', authError);
        return false;
      }

      if (!session) {
        console.error('No active session found');
        return false;
      }

      console.log('Authentication successful, testing storage access...');

      // Test if we can list the bucket contents
      const { data: listData, error: listError } = await supabase.storage
        .from('event-images')
        .list('', {
          limit: 1,
          offset: 0,
          sortBy: { column: 'name', order: 'asc' }
        });

      if (listError) {
        console.error('Storage list error:', {
          message: listError.message,
          details: listError
        });
        return false;
      }

      console.log('Storage access successful:', {
        bucketName: 'event-images',
        filesFound: listData?.length || 0
      });
      return true;
    } catch (error) {
      console.error('Storage test error:', {
        error,
        message: error instanceof Error ? error.message : 'Unknown error'
      });
      return false;
    }
  };

  const verifyStorageSetup = async () => {
    try {
      console.log('üîç Verifying storage setup...');

      // Test 1: Check if bucket exists and is accessible
      const { data: bucketData, error: bucketError } = await supabase.storage
        .from('event-images')
        .list();

      if (bucketError) {
        console.error('‚ùå Error accessing event-images bucket:', bucketError);
        return false;
      }
      console.log('‚úÖ event-images bucket exists and is accessible');

      // Clean up any existing test files
      const testFiles = bucketData?.filter(file => file.name.startsWith('test-')) || [];
      if (testFiles.length > 0) {
        console.log('üßπ Cleaning up old test files...');
        await supabase.storage
          .from('event-images')
          .remove(testFiles.map(file => file.name));
      }

      // Test 2: Try to upload a small test file
      const testFileName = 'test-' + Date.now() + '.txt';
      const testBlob = new Blob(['test'], { type: 'text/plain' });
      const testFile = new File([testBlob], testFileName, { type: 'text/plain' });

      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('event-images')
        .upload(testFileName, testFile);

      if (uploadError) {
        console.error('‚ùå Error uploading test file:', uploadError);
        return false;
      }
      console.log('‚úÖ Test file upload successful');

      // Test 3: Try to get public URL
      if (uploadData?.path) {
        const { data: urlData } = supabase.storage
          .from('event-images')
          .getPublicUrl(uploadData.path);

        if (!urlData.publicUrl) {
          console.error('‚ùå Could not get public URL');
          return false;
        }
        console.log('‚úÖ Public URL generation successful');

        // Clean up test file immediately
        await supabase.storage
          .from('event-images')
          .remove([uploadData.path]);
        console.log('‚úÖ Test file cleanup successful');
      }

      return true;
    } catch (error) {
      console.error('‚ùå Storage setup verification failed:', error);
      return false;
    }
  };

  const uploadImage = async (file: File): Promise<string> => {
    try {
      // Verify storage setup before upload
      const isStorageWorking = await verifyStorageSetup();
      if (!isStorageWorking) {
        throw new Error('Storage system is not properly configured. Please try again later.');
      }

      // Generate a unique filename with timestamp and random string
      const fileExt = file.name.split('.').pop();
      const randomString = Math.random().toString(36).substring(2, 15);
      const fileName = `event-${Date.now()}-${randomString}.${fileExt}`;
      
      console.log('üì§ Uploading image with filename:', fileName);
      
      // Upload the file to Supabase storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('event-images')
        .upload(fileName, file, {
          cacheControl: '3600',
          upsert: false,
          contentType: file.type
        });

      if (uploadError) {
        console.error('Upload error details:', {
          message: uploadError.message,
          name: uploadError.name,
          details: uploadError
        });
        throw new Error(`Failed to upload image: ${uploadError.message}`);
      }

      if (!uploadData?.path) {
        console.error('No upload data returned:', uploadData);
        throw new Error('No upload data returned');
      }

      // Get the public URL
      const { data } = supabase.storage
        .from('event-images')
        .getPublicUrl(uploadData.path);

      if (!data.publicUrl) {
        throw new Error('Failed to get public URL');
      }

      console.log('‚úÖ Image uploaded successfully:', data.publicUrl);
      return data.publicUrl;
    } catch (error) {
      console.error('‚ùå Error in uploadImage:', error);
      throw new Error(error instanceof Error ? error.message : 'Failed to upload image');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    try {
      if (!user) {
        throw new Error('Please log in to create events');
      }

      console.log('1. Form submission started with data:', formData);
      
      // Validate required fields
      const requiredFields = ['title', 'description', 'date', 'time', 'venue', 'ticket_price', 'capacity', 'category'];
      const missingFields = requiredFields.filter(field => !formData[field as keyof EventFormData]);
      
      if (missingFields.length > 0) {
        throw new Error(`Please fill in all required fields: ${missingFields.join(', ')}`);
      }

      // Validate numeric fields
      const ticketPrice = parseFloat(formData.ticket_price);
      const capacity = parseInt(formData.capacity);

      if (isNaN(ticketPrice) || ticketPrice < 0) {
        throw new Error('Please enter a valid ticket price');
      }

      if (isNaN(capacity) || capacity <= 0) {
        throw new Error('Please enter a valid capacity');
      }

      // Validate date
      const eventDate = new Date(formData.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      if (eventDate < today) {
        throw new Error('Event date must be today or in the future');
      }

      let imageUrl = formData.image_url;

      // Upload image if selected
      if (selectedFile) {
        console.log('2. Starting image upload process...');
        const uploadToastId = toast.loading('Uploading image...');
        try {
          imageUrl = await uploadImage(selectedFile);
          console.log('3. Image uploaded successfully:', imageUrl);
          toast.success('Image uploaded successfully!', { id: uploadToastId });
        } catch (error) {
          console.error('3a. Image upload failed:', error);
          toast.error('Failed to upload image', { id: uploadToastId });
          throw error;
        }
      }

      // Create event
      console.log('4. Preparing event data for submission...');
      const eventToastId = toast.loading('Creating event...');
      try {
        const eventData: EventSubmitData = {
          title: formData.title.trim(),
          description: formData.description.trim(),
          date: formData.date,
          time: formData.time,
          venue: formData.venue.trim(),
          category: formData.category,
          ticket_price: ticketPrice,
          capacity: capacity,
          image_url: imageUrl || undefined,
          status: 'Published',
          organizer_id: user.id,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        // Log the exact data being sent
        console.log('5. Submitting event data:', JSON.stringify(eventData, null, 2));
        await onSubmit(eventData);
        console.log('6. Event submission completed successfully');

        // Clear form only after successful submission
        setFormData({
          title: '',
          description: '',
          date: '',
          time: '',
          venue: '',
          category: 'concert',
          ticket_price: '',
          capacity: '',
          image_url: ''
        });
        setSelectedFile(null);
        setPreviewUrl(null);
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        
        toast.success('Event created!', { id: eventToastId });
      } catch (error) {
        console.error('6a. Event submission failed:', error);
        toast.error('Failed to create event', { id: eventToastId });
        throw error;
      }
    } catch (err) {
      console.error('‚ùå Form submission error:', err);
      const message = err instanceof Error ? err.message : 'Failed to submit form';
      setError(message);
      toast.error(message);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 max-w-3xl mx-auto">
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700">
          Event Title *
        </label>
        <input
          type="text"
          id="title"
          name="title"
          value={formData.title}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          required
        />
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
          Description *
        </label>
        <textarea
          id="description"
          name="description"
          rows={4}
          value={formData.description}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          required
        />
      </div>

      <div>
        <label htmlFor="category" className="block text-sm font-medium text-gray-700">
          Category *
        </label>
        <select
          id="category"
          name="category"
          value={formData.category}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          required
        >
          <option value="concert">Concert</option>
          <option value="conference">Conference</option>
          <option value="art">Art Exhibition</option>
          <option value="sports">Sports</option>
          <option value="workshop">Workshop</option>
          <option value="webinar">Webinar</option>
          <option value="other">Other</option>
        </select>
      </div>

      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
        <div>
          <label htmlFor="date" className="block text-sm font-medium text-gray-700">
            Date *
          </label>
          <input
            type="date"
            id="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            min={new Date().toISOString().split('T')[0]}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            required
          />
        </div>

        <div>
          <label htmlFor="time" className="block text-sm font-medium text-gray-700">
            Time *
          </label>
          <input
            type="time"
            id="time"
            name="time"
            value={formData.time}
            onChange={handleChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            required
          />
        </div>
      </div>

      <div>
        <label htmlFor="venue" className="block text-sm font-medium text-gray-700">
          Venue *
        </label>
        <input
          type="text"
          id="venue"
          name="venue"
          value={formData.venue}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          required
        />
      </div>

      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
        <div>
          <label htmlFor="ticket_price" className="block text-sm font-medium text-gray-700">
            Ticket Price (‚Ç¶) *
          </label>
          <input
            type="number"
            id="ticket_price"
            name="ticket_price"
            value={formData.ticket_price}
            onChange={handleChange}
            min="0"
            step="0.01"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            required
          />
        </div>

        <div>
          <label htmlFor="capacity" className="block text-sm font-medium text-gray-700">
            Capacity *
          </label>
          <input
            type="number"
            id="capacity"
            name="capacity"
            value={formData.capacity}
            onChange={handleChange}
            min="1"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            required
          />
        </div>
      </div>

      <div>
        <label htmlFor="file-upload" className="block text-sm font-medium text-gray-700">
          Event Poster
        </label>
        <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
          <div className="space-y-1 text-center">
            {previewUrl ? (
              <div className="relative">
                <img
                  src={previewUrl}
                  alt="Preview"
                  className="mx-auto h-48 w-auto object-cover rounded-md"
                />
                <button
                  type="button"
                  onClick={() => {
                    setSelectedFile(null);
                    setPreviewUrl(null);
                    if (fileInputRef.current) {
                      fileInputRef.current.value = '';
                    }
                  }}
                  className="absolute top-0 right-0 -mt-2 -mr-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            ) : (
              <>
                <svg
                  className="mx-auto h-12 w-12 text-gray-400"
                  stroke="currentColor"
                  fill="none"
                  viewBox="0 0 48 48"
                  aria-hidden="true"
                >
                  <path
                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                    strokeWidth={2}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <div className="flex text-sm text-gray-600">
                  <label
                    htmlFor="file-upload"
                    className="relative cursor-pointer bg-white rounded-md font-medium text-green-600 hover:text-green-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-green-500"
                  >
                    <span>Upload a file</span>
                    <input
                      id="file-upload"
                      name="poster"
                      type="file"
                      ref={fileInputRef}
                      className="sr-only"
                      accept="image/*"
                      onChange={handleFileChange}
                      aria-label="Upload event poster"
                    />
                  </label>
                  <p className="pl-1">or drag and drop</p>
                </div>
                <p className="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
              </>
            )}
          </div>
        </div>
      </div>

      <div className="flex justify-end space-x-4 pt-4">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          disabled={isSubmitting}
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50"
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Creating...' : 'Create Event'}
        </button>
      </div>
    </form>
  );
};

export default EventForm; 